/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Controller.listagem_de_perguntas;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author André Martins, Diogo Matos, João Fernandes, Vasco Rodrigues
 */
public class JFrameMenuQuizAutomatico extends javax.swing.JFrame {

    /**
     * Creates new form JFrameMenuQuizAutomatico
     */
    public JFrameMenuQuizAutomatico() throws SQLException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() throws SQLException {

        botaoMenuPrincipalQuizAutomatico = new javax.swing.JButton();
        jPanelQuizAutomatico1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        botaoTipoPerguntas1 = new javax.swing.JButton();
        botaoExportar = new javax.swing.JButton();
        tituloQuizAutomatico = new javax.swing.JLabel();
        jTextFieldNomeQuizAutomatico = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanelQuizAutomatico2 = new javax.swing.JPanel();
        jCheckBoxCurta = new javax.swing.JCheckBox();
        jCheckBoxDesenvolvimento = new javax.swing.JCheckBox();
        jCheckBoxCalculada = new javax.swing.JCheckBox();
        jCheckBoxCorrespondenciaColunas = new javax.swing.JCheckBox();
        jCheckBoxEscolhaMultipla = new javax.swing.JCheckBox();
        jCheckBoxMultiplaEscolha = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxUC = new javax.swing.JComboBox<>();
        jComboBoxTema = new javax.swing.JComboBox<>();
        jLabelUC = new javax.swing.JLabel();
        jLabelTema = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        String header1[] = new String[] {"ID", "Nome"};

        String header2[] = new String[] {"ID", "Descrição", "UC", "Tipo de pergunta"};

        DefaultTableModel dtm1 = new DefaultTableModel(0,0){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };

        DefaultTableModel dtm2 = new DefaultTableModel(0,0){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };

        dtm2.setColumnIdentifiers(header2);

        dtm1.setColumnIdentifiers(header1);

        List<String> AllTopicIDs = new ArrayList<String>();

        jTable2.setModel(dtm1);
        jTable2.getTableHeader().setResizingAllowed(false);
        jTable2.getTableHeader().setReorderingAllowed(false);


        List<String> AllquestionsID = new ArrayList<>();

        jTable1.setModel(dtm2);
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        botaoMenuPrincipalQuizAutomatico.setText("Menu Principal");
        botaoMenuPrincipalQuizAutomatico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoMenuPrincipalQuizAutomaticoActionPerformed(evt);
            }
        });

        jPanelQuizAutomatico1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        jTextField1.setText("Nº de Perguntas");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        botaoTipoPerguntas1.setText("Gerar");
        botaoTipoPerguntas1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dtm2.setRowCount(0);

                String queryToGetQuestions = "SELECT Q.QuestionId AS Question FROM Question Q JOIN Topic T ON Q.TopicId = T.TopicId WHERE Q.Type IN (";

                //
//
//
//                        )
//                        AND T.TopicId = <topic_id>;

                int checkint = 0;
                if(jCheckBoxCurta.isSelected()){
                    checkint++;
                    queryToGetQuestions = queryToGetQuestions + "'Resposta Curta',";
                }
                if(jCheckBoxDesenvolvimento.isSelected()){
                    queryToGetQuestions = queryToGetQuestions + "'Desenvolvimento',";
                    checkint++;
                }
                if(jCheckBoxCalculada.isSelected()){
                    queryToGetQuestions = queryToGetQuestions + "'Calculo',";
                    checkint++;
                }
                if(jCheckBoxCorrespondenciaColunas.isSelected()){
                    queryToGetQuestions = queryToGetQuestions + "'Correspondência',";
                    checkint++;
                }
                if(jCheckBoxEscolhaMultipla.isSelected()){
                    queryToGetQuestions = queryToGetQuestions + "'Escolha múltipla',";
                    checkint++;
                }
                if(jCheckBoxMultiplaEscolha.isSelected()){
                    queryToGetQuestions = queryToGetQuestions + "'Múltipla escolha',";
                    checkint++;
                }
                queryToGetQuestions = queryToGetQuestions.substring(0, queryToGetQuestions.length() - 1);

                queryToGetQuestions = queryToGetQuestions + ") AND T.TopicId = ";


                if(jTextField1.getText().equals("Nº de Perguntas") || jTextField1.getText().equals("")){
                    JFramePopupErro6 jf6 = new JFramePopupErro6();
                    jf6.show();
                } else if(checkint == 0){
                    JFramePopupErro5 jf5 = new JFramePopupErro5();
                    jf5.show();
                } else if(AllTopicIDs.size() == 0){
                    JFramePopupErro4 jf4 = new JFramePopupErro4();
                    jf4.show();
                } else {
                    Boolean stop = false;
                    int numTotalQuestions = 0;
                    for(int i = 0; i<AllTopicIDs.size();i++) {
                        List<List<String>> q = new ArrayList<List<String>>();
                        try {
                            q = listagem_de_perguntas.getCustomQuestionWithSomeTypes(queryToGetQuestions + AllTopicIDs.get(i) + ";");
                        } catch (SQLException e) {
                            throw new RuntimeException(e);
                        }
                        numTotalQuestions = numTotalQuestions + q.size();
                        if(q.size() == 0){
                            stop = true;
                            break;
                        }
                    }

                    if(numTotalQuestions < Integer.parseInt(jTextField1.getText())){
                        JFramePopupErro2 jf2 = new JFramePopupErro2();
                        jf2.show();
                    } else if(stop == true){
                        JFramePopupErro1 jf1 = new JFramePopupErro1();
                        jf1.show();
                    } else{

                        int numberPerTopic = Integer.parseInt(jTextField1.getText()) / AllTopicIDs.size();
                        int rest = Integer.parseInt(jTextField1.getText()) % AllTopicIDs.size();
                        for(int i = 0; i<AllTopicIDs.size();i++) {
                            List<List<String>> q = new ArrayList<>();
                            try {
                                q = listagem_de_perguntas.getCustomQuestionWithType(String.format("SELECT * FROM QUESTION WHERE TOPICID = '%s' ORDER BY RAND();", AllTopicIDs.get(i)));
                            } catch (SQLException e) {
                                throw new RuntimeException(e);
                            }
                            if(q.size()<numberPerTopic){
                                rest = rest + numberPerTopic-q.size();
                                try {
                                    AllquestionsID.addAll(listagem_de_perguntas.getquestionID(queryToGetQuestions + AllTopicIDs.get(i) + ";"));
                                } catch (SQLException e) {
                                    throw new RuntimeException(e);
                                }
                            } else{
                                try {
                                    AllquestionsID.addAll(listagem_de_perguntas.getquestionID(queryToGetQuestions + AllTopicIDs.get(i) + " ORDER BY RAND() LIMIT " + numberPerTopic + ";"));

                                } catch (SQLException e) {
                                    throw new RuntimeException(e);
                                }
                            }
                        }



                        if(rest != 0){
                            String query = "SELECT Q.QuestionId AS Question FROM Question Q JOIN Topic T ON Q.TopicId = T.TopicId WHERE T.TopicId IN (";

                            for(int i = 0; i<AllTopicIDs.size();i++){
                                if(i == 0){
                                    query = query + AllTopicIDs.get(i);
                                }else {
                                    query = query + ", " + AllquestionsID.get(i);
                                }
                            }

                            query = query + ") AND Q.QuestionId NOT IN (";

                            for(int i = 0; i<AllquestionsID.size(); i++){
                                if(i == 0){
                                    query = query + AllquestionsID.get(i);
                                }else {
                                    query = query + ", " + AllquestionsID.get(i);
                                }
                            }

                            query = query + ") ORDER BY RAND()  LIMIT " + rest + ";";

                            try {
                                AllquestionsID.addAll(listagem_de_perguntas.getquestionID(query));
                            } catch (SQLException e) {
                                throw new RuntimeException(e);
                            }

                        }

                            String query = "SELECT QUESTION.QuestionID, QUESTION.Description, question_subject.SubjectName, QUESTION.Type FROM QUESTION INNER JOIN topic ON question.TopicId = topic.TopicId INNER JOIN question_subject ON question_subject.QuestionSubjectId = topic.QuestionSubjectId WHERE question.QuestionId IN (";
                            for (int i = 0; i < AllquestionsID.size(); i++) {
                                if (i == 0) {
                                    query = query + AllquestionsID.get(i);
                                } else {
                                    query = query + ", " + AllquestionsID.get(i);
                                }
                            }
                            query = query + ");";


                        List<List<String>> questions = null;
                        try {
                            questions = listagem_de_perguntas.getCustomQuestionWithType(query);
                        } catch (SQLException e) {
                            throw new RuntimeException(e);
                        }
                        for(int i = 0; i < questions.size(); i++){
                            List<String> a = questions.get(i);
                            dtm2.addRow(new Object[] {a.get(0), a.get(1), a.get(2), a.get(3)});
                        }
                    }
                }
            }
        });

        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(!e.getValueIsAdjusting()){
                    String id = (String) jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                    JFrameAdicionarPerguntaQuizManual jfpopup = null;
                    try {
                        jfpopup = new JFrameAdicionarPerguntaQuizManual(jTable1.getValueAt(jTable1.getSelectedRow(),0).toString());
                    } catch (SQLException ex) {
                        throw new RuntimeException(ex);
                    }
                    jfpopup.show();
                }
            }
        });

        botaoExportar.setText("Exportar");
        botaoExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if(AllquestionsID.size() != 0){
                    dbToXML.EssayQueryToXML.main();
                    dbToXML.MatchQueryToXML.main();
                    dbToXML.MultipleChoiceQueryToXML.main();
                    dbToXML.ShortAnswerQueryToXML.main();

                    dbToXML.Main.main(AllquestionsID, jTextFieldNomeQuizAutomatico.getText());

                }
            }
        });

        javax.swing.GroupLayout jPanelQuizAutomatico1Layout = new javax.swing.GroupLayout(jPanelQuizAutomatico1);
        jPanelQuizAutomatico1.setLayout(jPanelQuizAutomatico1Layout);
        jPanelQuizAutomatico1Layout.setHorizontalGroup(
            jPanelQuizAutomatico1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelQuizAutomatico1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanelQuizAutomatico1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botaoTipoPerguntas1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1)
                    .addComponent(botaoExportar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanelQuizAutomatico1Layout.setVerticalGroup(
            jPanelQuizAutomatico1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelQuizAutomatico1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(botaoTipoPerguntas1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botaoExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
        );

        tituloQuizAutomatico.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        tituloQuizAutomatico.setText("Gerar Quiz Automático");

        jTextFieldNomeQuizAutomatico.setText("Nome do Quiz");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jScrollPane1.setViewportView(jTable1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jScrollPane2.setViewportView(jTable2);

        jPanelQuizAutomatico2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jCheckBoxCurta.setText("Curta");

        jCheckBoxDesenvolvimento.setText("Desenvolvimento");

        jCheckBoxCalculada.setText("Calculada");

        jCheckBoxCorrespondenciaColunas.setText("Correspondência de Colunas");

        jCheckBoxEscolhaMultipla.setText("Escolha Múltipla");

        jCheckBoxMultiplaEscolha.setText("Múltipla Escolha");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel2.setText("Tipos de Perguntas:");

        javax.swing.GroupLayout jPanelQuizAutomatico2Layout = new javax.swing.GroupLayout(jPanelQuizAutomatico2);
        jPanelQuizAutomatico2.setLayout(jPanelQuizAutomatico2Layout);
        jPanelQuizAutomatico2Layout.setHorizontalGroup(
            jPanelQuizAutomatico2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelQuizAutomatico2Layout.createSequentialGroup()
                .addGroup(jPanelQuizAutomatico2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelQuizAutomatico2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelQuizAutomatico2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBoxCurta, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxCalculada, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxDesenvolvimento))
                        .addGap(44, 44, 44)
                        .addGroup(jPanelQuizAutomatico2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxCorrespondenciaColunas)
                            .addGroup(jPanelQuizAutomatico2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jCheckBoxMultiplaEscolha, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBoxEscolhaMultipla, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanelQuizAutomatico2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel2)))
                .addContainerGap(9, Short.MAX_VALUE))
        );
        jPanelQuizAutomatico2Layout.setVerticalGroup(
            jPanelQuizAutomatico2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelQuizAutomatico2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanelQuizAutomatico2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelQuizAutomatico2Layout.createSequentialGroup()
                        .addComponent(jCheckBoxCorrespondenciaColunas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxEscolhaMultipla)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxMultiplaEscolha))
                    .addGroup(jPanelQuizAutomatico2Layout.createSequentialGroup()
                        .addComponent(jCheckBoxCurta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxDesenvolvimento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxCalculada)))
                .addGap(35, 35, 35))
        );

        jComboBoxUC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        jComboBoxUC.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jComboBoxTema.removeAllItems();
                String subject = (String) jComboBoxUC.getSelectedItem();
                List<String> topic = new ArrayList<String>();


                try {
                    topic = listagem_de_perguntas.getTopic(subject);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }

                topic.add(0, "--Default--");

                for(int i = 0; i<topic.size(); i++) {
                    jComboBoxTema.addItem(topic.get(i));
                }
            }
        });

        jComboBoxTema.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"--Default--"}));
        jComboBoxTema.setSelectedIndex(-1);
        jComboBoxTema.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jComboBoxTema.getSelectedItem() != null && jComboBoxTema.getSelectedItem() != "" && jComboBoxTema.getSelectedItem() != "--Default--") {
                    String topic = (String) jComboBoxTema.getSelectedItem();
                    String topicid = null;
                    try {
                        topicid = listagem_de_perguntas.getTopicID(jComboBoxUC.getSelectedItem().toString(), topic);
                    } catch (SQLException ex) {
                        throw new RuntimeException(ex);
                    }
                    if(!AllTopicIDs.contains(topicid)) {
                        dtm1.addRow(new String[]{topicid, topic});
                        AllTopicIDs.add(topicid);
                    }
                }
            }
        });

        List<String> values = listagem_de_perguntas.getSubjects();
        values.add(0, "--Default--");

        for(int i = 0; i<values.size(); i++) {
            jComboBoxUC.addItem(values.get(i));
        }

        jTable2.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(!e.getValueIsAdjusting()){
                    if(jTable2.getSelectedRow() >= 0) {
                        String id = (String) jTable2.getValueAt(jTable2.getSelectedRow(), 0);
                        AllTopicIDs.remove(id);
                        dtm1.removeRow(jTable2.getSelectedRow());
                    }
                }
            }
        });

        jLabelUC.setText("Unidade Curricular:");

        jLabelTema.setText("Tema:");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel1.setText("Temas:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jPanelQuizAutomatico1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botaoMenuPrincipalQuizAutomatico)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jTextFieldNomeQuizAutomatico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(tituloQuizAutomatico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanelQuizAutomatico2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jLabel1))
                            .addComponent(jLabelUC)
                            .addComponent(jComboBoxUC, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTema, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxTema, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabelTema)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxTema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabelUC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxUC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botaoMenuPrincipalQuizAutomatico, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jTextFieldNomeQuizAutomatico, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(tituloQuizAutomatico)
                                .addGap(28, 28, 28)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                            .addComponent(jPanelQuizAutomatico1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelQuizAutomatico2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(69, 69, 69))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void botaoMenuPrincipalQuizAutomaticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoMenuPrincipalQuizAutomaticoActionPerformed
        
        JFrameMenuPrincipal jf1 = new JFrameMenuPrincipal();
        jf1.show(); //display JFrameMenuQuizManual
        
        dispose(); //fechar o frame atual
            // TODO add your handling code here:
    }//GEN-LAST:event_botaoMenuPrincipalQuizAutomaticoActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void botaoTipoPerguntas1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoTipoPerguntas1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoTipoPerguntas1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameMenuQuizAutomatico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameMenuQuizAutomatico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameMenuQuizAutomatico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameMenuQuizAutomatico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new JFrameMenuQuizAutomatico().setVisible(true);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoExportar;
    private javax.swing.JButton botaoMenuPrincipalQuizAutomatico;
    private javax.swing.JButton botaoTipoPerguntas1;
    private javax.swing.JCheckBox jCheckBoxCalculada;
    private javax.swing.JCheckBox jCheckBoxCorrespondenciaColunas;
    private javax.swing.JCheckBox jCheckBoxCurta;
    private javax.swing.JCheckBox jCheckBoxDesenvolvimento;
    private javax.swing.JCheckBox jCheckBoxEscolhaMultipla;
    private javax.swing.JCheckBox jCheckBoxMultiplaEscolha;
    private javax.swing.JComboBox<String> jComboBoxTema;
    private javax.swing.JComboBox<String> jComboBoxUC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelTema;
    private javax.swing.JLabel jLabelUC;
    private javax.swing.JPanel jPanelQuizAutomatico1;
    private javax.swing.JPanel jPanelQuizAutomatico2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextFieldNomeQuizAutomatico;
    private javax.swing.JLabel tituloQuizAutomatico;
    // End of variables declaration//GEN-END:variables
}
