/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Views.QuizManual;

import Controller.listagem_de_perguntas;
import Views.MainMenu.*;


import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author vasco
 */
public class JFrameMenuQuizManual extends JFrame {

    /**
     * Creates new form JFrameMenuQuizManual
     */
    public JFrameMenuQuizManual() throws SQLException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() throws SQLException {

        botaoMenuPrincipalQuizManual = new JButton();
        jTextFieldNomeQuizManual = new JTextField();
        tituloQuizManual = new JLabel();
        jScrollPane1 = new JScrollPane();
        jTable2 = new JTable();
        jScrollPane2 = new JScrollPane();
        jTable1 = new JTable();
        jPanel1 = new JPanel();
        jLabelCadeiraLista = new JLabel();
        jComboBoxCadeiraLista = new JComboBox<>();
        jComboBoxTemaLista = new JComboBox<>();
        jLabelCadeiraLista1 = new JLabel();
        jComboBoxTipoPerguntaLista = new JComboBox<>();
        jLabelCadeiraLista2 = new JLabel();
        jTextField1 = new JTextField();
        jButton1 = new JButton();

        String header[] = new String[] {"ID", "Descrição", "UC", "Tipo de pergunta", "info"};
        jTextField1.setEditable(false);

        List<String> ids = new ArrayList<String>();
        List<String> list_to_export = new ArrayList<>();

        DefaultTableModel dtm1 = new DefaultTableModel(0,0){
            public boolean isCellEditable(int row, int column)
            {
                return false;//This causes all cells to be not editable
            }
        };

        dtm1.setColumnIdentifiers(header);

        jTable1.setModel(dtm1);

        DefaultTableModel dtm2 = new DefaultTableModel(0,0){
            public boolean isCellEditable(int row, int column)
            {
                return false;//This causes all cells to be not editable
            }
        };

        dtm2.setColumnIdentifiers(header);
        jTable2.setModel(dtm2);

        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable2.getTableHeader().setReorderingAllowed(false);


        List<List<String>> questions = listagem_de_perguntas.getAllQuestions();
        for(int i = 0; i < questions.size(); i++){
            List<String> a = questions.get(i);
            if(!ids.contains(a.get(0))) {
                dtm1.addRow(new Object[]{a.get(0), a.get(1), a.get(2)});
            }
        }



        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(!e.getValueIsAdjusting()){
                    if(jTable1.isColumnSelected(4)){

                        String id = (String) jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                        JFrameAdicionarPerguntaQuizManual jfpopup = null;
                        try {
                            jfpopup = new JFrameAdicionarPerguntaQuizManual(jTable1.getValueAt(jTable1.getSelectedRow(),0).toString());
                        } catch (SQLException ex) {
                            throw new RuntimeException(ex);
                        }
                        jfpopup.show();
                    } else{
                        if(!e.getValueIsAdjusting()) {
                            try{
                                int selected = jTable1.getSelectedRow();
                                ids.add(jTable1.getValueAt(selected, 0).toString());
                                list_to_export.add(jTable1.getValueAt(selected, 0).toString());
                                dtm2.addRow(new Object[]{jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString(), jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString(), jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString(), jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString()});
                                dtm1.removeRow(selected);
                                Integer numb = Integer.parseInt(jTextField1.getText()) + 1;
                                jTextField1.setText(numb.toString());
                            } catch (Exception f){

                            }
                        }
                    }
                }
            }
        });


        jTable2.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(!e.getValueIsAdjusting()){
                    if(jTable1.isColumnSelected(4)){

                        String id = (String) jTable2.getValueAt(jTable2.getSelectedRow(), 0);

                        JFrameAdicionarPerguntaQuizManual jfpopup = null;
                        try {
                            jfpopup = new JFrameAdicionarPerguntaQuizManual(jTable1.getValueAt(jTable1.getSelectedRow(),0).toString());
                        } catch (SQLException ex) {
                            throw new RuntimeException(ex);
                        }
                        jfpopup.show();
                    } else{
                        if(!e.getValueIsAdjusting()) {
                            try{
                                int selected = jTable2.getSelectedRow();
                                ids.remove(jTable2.getValueAt(selected, 0).toString());
                                dtm1.addRow(new Object[]{jTable2.getValueAt(jTable2.getSelectedRow(), 0).toString(), jTable2.getValueAt(jTable2.getSelectedRow(), 1).toString(), jTable2.getValueAt(jTable2.getSelectedRow(), 2).toString(), jTable2.getValueAt(jTable2.getSelectedRow(), 3).toString()});
                                dtm2.removeRow(selected);
                                Integer numb = Integer.parseInt(jTextField1.getText()) - 1;
                                jTextField1.setText(numb.toString());
                            } catch (Exception f){

                            }
                        }
                    }
                }
            }
        });

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        botaoMenuPrincipalQuizManual.setText("Menu Principal");
        botaoMenuPrincipalQuizManual.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                botaoMenuPrincipalQuizManualActionPerformed(evt);
                dispose();
            }
        });

        jTextFieldNomeQuizManual.setText("Nome do Quiz");
        jTextFieldNomeQuizManual.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jTextFieldNomeQuizManualActionPerformed(evt);
            }
        });

        tituloQuizManual.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        tituloQuizManual.setText("Gerar Quiz Manual");

        jTable1.getTableHeader().setResizingAllowed(false);
        jTable2.getTableHeader().setResizingAllowed(false);

        jTable1.getColumnModel().getColumn(0).setPreferredWidth(15);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(15);
        jTable2.getColumnModel().getColumn(0).setPreferredWidth(30);
        jTable2.getColumnModel().getColumn(4).setPreferredWidth(15);

        jScrollPane1.setViewportView(jTable2);

        jScrollPane2.setViewportView(jTable1);

        jPanel1.setBorder(BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabelCadeiraLista.setText("Cadeira");



        jComboBoxTemaLista.setModel(new DefaultComboBoxModel<>());
        jComboBoxTemaLista.setSelectedIndex(-1);
        jComboBoxTemaLista.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                List<List<String>> result = null;
                String topic = (String) jComboBoxTemaLista.getSelectedItem();
                String subject = (String) jComboBoxCadeiraLista.getSelectedItem();

                try {
                    result = listagem_de_perguntas.getCustomQuestionWithType(String.format("SELECT QUESTION.QuestionID, QUESTION.Description, question_subject.SubjectName, QUESTION.Type FROM QUESTION INNER JOIN topic ON question.TopicId = topic.TopicId INNER JOIN question_subject ON question_subject.QuestionSubjectId = topic.QuestionSubjectId WHERE topic.TopicName = '%s';", topic));
                } catch (SQLException eSQL) {
                    throw new RuntimeException(eSQL);
                }

                if(topic == "--Default--"){
                    dtm1.setRowCount(0);
                    List<List<String>> resultS = null;
                    try {
                        resultS = listagem_de_perguntas.getCustomQuestionWithType(String.format("SELECT QUESTION.QuestionID, QUESTION.Description, question_subject.SubjectName, QUESTION.Type FROM QUESTION INNER JOIN topic ON question.TopicId = topic.TopicId INNER JOIN question_subject ON question_subject.QuestionSubjectId = topic.QuestionSubjectId WHERE question_subject.SubjectName = '%s';", subject));
                    } catch (SQLException eSQL) {
                        throw new RuntimeException(eSQL);
                    }

                    for (int i = 0; i < resultS.size(); i++) {
                        List<String> a = resultS.get(i);
                        if(!ids.contains(a.get(0))) {
                            dtm1.addRow(new Object[]{a.get(0), a.get(1), a.get(2), a.get(3)});
                        }
                    }
                }

                if(topic != "--Default--") {
                    dtm1.setRowCount(0);
                }

                for(int i = 0; i < result.size(); i++){
                    List<String> a = result.get(i);
                    if(!ids.contains(a.get(0))) {
                        dtm1.addRow(new Object[]{a.get(0), a.get(1), a.get(2), a.get(3)});
                    }
                }
            }
        });


        jComboBoxCadeiraLista.setModel(new DefaultComboBoxModel<>());
        jComboBoxCadeiraLista.setSelectedIndex(-1);
        jComboBoxCadeiraLista.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jComboBoxTemaLista.removeAllItems();
                String subject = (String) jComboBoxCadeiraLista.getSelectedItem();
                List<String> topic = new ArrayList<String>();


                try {
                    topic = listagem_de_perguntas.getTopic(subject);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }

                topic.add(0, "--Default--");

                for(int i = 0; i<topic.size(); i++) {
                    jComboBoxTemaLista.addItem(topic.get(i));
                }

                List<List<String>> result = null;
                try {
                    result = listagem_de_perguntas.getCustomQuestionWithType(String.format("SELECT QUESTION.QuestionID, QUESTION.Description, question_subject.SubjectName, QUESTION.Type FROM QUESTION INNER JOIN topic ON question.TopicId = topic.TopicId INNER JOIN question_subject ON question_subject.QuestionSubjectId = topic.QuestionSubjectId WHERE question_subject.SubjectName = '%s';", subject));
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }

                if(subject == "--Default--"){
                    dtm1.setRowCount(0);
                    List<List<String>> questions = null;
                    try {
                        questions = listagem_de_perguntas.getAllQuestionsWithType();
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    for(int i = 0; i < questions.size(); i++){
                        List<String> a = questions.get(i);
                        if(!ids.contains(a.get(0))) {
                            dtm1.addRow(new Object[]{a.get(0), a.get(1), a.get(2), a.get(3)});
                        }
                    }
                }

                if(subject != "--Default--") {
                    dtm1.setRowCount(0);
                }
                for(int i = 0; i < result.size(); i++){
                    List<String> a = result.get(i);
                    if(!ids.contains(a.get(0))) {
                        dtm1.addRow(new Object[]{a.get(0), a.get(1), a.get(2), a.get(3)});
                    }
                }
            }
        });

        List<String> values = listagem_de_perguntas.getSubjects();
        values.add(0, "--Default--");

        for(int i = 0; i<values.size(); i++) {
            jComboBoxCadeiraLista.addItem(values.get(i));
        }


        jLabelCadeiraLista1.setText("Tema");

        jComboBoxTipoPerguntaLista.setModel(new DefaultComboBoxModel<>(new String[] {"--Default--", "Escolha Múltipla", "Desenvolvimento", "Curta", "Calculada", "Correspondência de Colunas" }));
        jComboBoxTipoPerguntaLista.setSelectedIndex(0);
        jComboBoxTipoPerguntaLista.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                List<List<String>> result = null;
                String topic = (String) jComboBoxTemaLista.getSelectedItem();
                String subject = (String) jComboBoxCadeiraLista.getSelectedItem();
                String qType = (String) jComboBoxTipoPerguntaLista.getSelectedItem();

                try {
                    result = listagem_de_perguntas.getCustomQuestionWithType(String.format("SELECT QUESTION.QuestionID, QUESTION.Description, question_subject.SubjectName, QUESTION.Type FROM QUESTION INNER JOIN topic ON question.TopicId = topic.TopicId INNER JOIN question_subject ON question_subject.QuestionSubjectId = topic.QuestionSubjectId WHERE QUESTION.Type = '%s';", qType));
                } catch (SQLException eSQL) {
                    throw new RuntimeException(eSQL);
                }

                if(qType == "--Default--"){
                    if(topic == "--Default--"){
                        dtm1.setRowCount(0);
                        result = null;
                        try {
                            result = listagem_de_perguntas.getCustomQuestionWithType(String.format("SELECT QUESTION.QuestionID, QUESTION.Description, question_subject.SubjectName, QUESTION.Type FROM QUESTION INNER JOIN topic ON question.TopicId = topic.TopicId INNER JOIN question_subject ON question_subject.QuestionSubjectId = topic.QuestionSubjectId WHERE question_subject.SubjectName = '%s';", subject));
                        } catch (SQLException e) {
                            throw new RuntimeException(e);
                        }
                        for (int i = 0; i < result.size(); i++) {
                            List<String> a = result.get(i);
                            if(!ids.contains(a.get(0))) {
                                dtm1.addRow(new Object[]{a.get(0), a.get(1), a.get(2), a.get(3)});
                            }
                        }
                    }

                    if(topic != "--Default--") {
                        dtm1.setRowCount(0);
                        try {
                            result = listagem_de_perguntas.getCustomQuestionWithType(String.format("SELECT QUESTION.QuestionID, QUESTION.Description, question_subject.SubjectName, QUESTION.Type FROM QUESTION INNER JOIN topic ON question.TopicId = topic.TopicId INNER JOIN question_subject ON question_subject.QuestionSubjectId = topic.QuestionSubjectId WHERE topic.TopicName = '%s';", topic));
                        } catch (SQLException eSQL) {
                            throw new RuntimeException(eSQL);
                        }
                        for (int i = 0; i < result.size(); i++) {
                            List<String> a = result.get(i);
                            if(!ids.contains(a.get(0))) {
                                dtm1.addRow(new Object[]{a.get(0), a.get(1), a.get(2), a.get(3)});
                            }
                        }
                    }

                    if (subject == "--Default--") {
                        dtm1.setRowCount(0);
                        List<List<String>> questions = null;
                        try {
                            questions = listagem_de_perguntas.getAllQuestions();
                        } catch (SQLException e) {
                            throw new RuntimeException(e);
                        }
                        for (int i = 0; i < questions.size(); i++) {
                            List<String> a = questions.get(i);
                            if(!ids.contains(a.get(0))) {
                                dtm1.addRow(new Object[]{a.get(0), a.get(1), a.get(2)});
                            }
                        }
                    }
                }else{
                    dtm1.setRowCount(0);
                    if(topic == "--Default--"){
                        dtm1.setRowCount(0);
                        result = null;
                        try {
                            result = listagem_de_perguntas.getCustomQuestionWithType(String.format("SELECT QUESTION.QuestionID, QUESTION.Description, question_subject.SubjectName, QUESTION.Type FROM QUESTION INNER JOIN topic ON question.TopicId = topic.TopicId INNER JOIN question_subject ON question_subject.QuestionSubjectId = topic.QuestionSubjectId WHERE question_subject.SubjectName = '%s' AND question.Type = '%s';", subject, qType));
                        } catch (SQLException e) {
                            throw new RuntimeException(e);
                        }
                        for (int i = 0; i < result.size(); i++) {
                            List<String> a = result.get(i);
                            if(!ids.contains(a.get(0))) {
                                dtm1.addRow(new Object[]{a.get(0), a.get(1), a.get(2), a.get(3)});
                            }
                        }
                    }

                    if(topic != "--Default--") {
                        dtm1.setRowCount(0);
                        try {
                            result = listagem_de_perguntas.getCustomQuestionWithType(String.format("SELECT QUESTION.QuestionID, QUESTION.Description, question_subject.SubjectName, QUESTION.Type FROM QUESTION INNER JOIN topic ON question.TopicId = topic.TopicId INNER JOIN question_subject ON question_subject.QuestionSubjectId = topic.QuestionSubjectId WHERE topic.TopicName = '%s' AND question.Type = '%s';", topic, qType));
                        } catch (SQLException eSQL) {
                            throw new RuntimeException(eSQL);
                        }
                        for (int i = 0; i < result.size(); i++) {
                            List<String> a = result.get(i);
                            if(!ids.contains(a.get(0))) {
                                dtm1.addRow(new Object[]{a.get(0), a.get(1), a.get(2), a.get(3)});
                            }
                        }
                    }

                    if (subject == "--Default--") {
                        dtm1.setRowCount(0);
                        List<List<String>> questions = null;
                        try {
                            questions = listagem_de_perguntas.getCustomQuestionWithType(String.format("SELECT QUESTION.QuestionID, QUESTION.Description, question_subject.SubjectName, QUESTION.Type FROM QUESTION INNER JOIN topic ON question.TopicId = topic.TopicId INNER JOIN question_subject ON question_subject.QuestionSubjectId = topic.QuestionSubjectId WHERE question.Type = '%s';",  qType));
                        } catch (SQLException e) {
                            throw new RuntimeException(e);
                        }
                        for (int i = 0; i < questions.size(); i++) {
                            List<String> a = questions.get(i);
                            if(!ids.contains(a.get(0))) {
                                dtm1.addRow(new Object[]{a.get(0), a.get(1), a.get(2), a.get(3)});
                            }
                        }
                    }

                }
            }
        });

        jLabelCadeiraLista2.setText("Tipo de Pergunta");

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelCadeiraLista, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxCadeiraLista, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelCadeiraLista1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxTemaLista, 0, 179, Short.MAX_VALUE)
                    .addComponent(jLabelCadeiraLista2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxTipoPerguntaLista, 0, 179, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabelCadeiraLista)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxCadeiraLista, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelCadeiraLista1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxTemaLista, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelCadeiraLista2)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxTipoPerguntaLista, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextField1.setText("0");

        jButton1.setText("Export");
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if(ids.size() != 0){

                    dbToXML.Main.main(ids, jTextFieldNomeQuizManual.getText());

                }
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldNomeQuizManual)
                    .addComponent(botaoMenuPrincipalQuizManual, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(277, 277, 277)
                .addComponent(tituloQuizManual, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(440, 440, 440))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, 115, GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 270, GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 550, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(tituloQuizManual, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(botaoMenuPrincipalQuizManual, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldNomeQuizManual, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(27, 27, 27))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void botaoMenuPrincipalQuizManualActionPerformed(ActionEvent evt) {//GEN-FIRST:event_botaoMenuPrincipalQuizManualActionPerformed
       JFrameMenuPrincipal jf1 = new JFrameMenuPrincipal();
        jf1.show(); //display JFrameMenuQuizManual
        
      // TODO add your handling code here:
    }//GEN-LAST:event_botaoMenuPrincipalQuizManualActionPerformed

    private void jTextFieldNomeQuizManualActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jTextFieldNomeQuizManualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNomeQuizManualActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameMenuQuizManual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameMenuQuizManual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameMenuQuizManual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameMenuQuizManual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new JFrameMenuQuizManual().setVisible(true);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton botaoMenuPrincipalQuizManual;
    private JButton jButton1;
    private JComboBox<String> jComboBoxCadeiraLista;
    private JComboBox<String> jComboBoxTemaLista;
    private JComboBox<String> jComboBoxTipoPerguntaLista;
    private JLabel jLabelCadeiraLista;
    private JLabel jLabelCadeiraLista1;
    private JLabel jLabelCadeiraLista2;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JTable jTable1;
    private JTable jTable2;
    private JTextField jTextField1;
    private JTextField jTextFieldNomeQuizManual;
    private JLabel tituloQuizManual;
    // End of variables declaration//GEN-END:variables
}
